// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"log"

	"github.com/go-swagger/go-swagger/examples/tutorials/todo-list/cli/code/client/todos"

	"github.com/spf13/cobra"
)

// addOperationTodosFindTodosCmd adds sub commands to operation opCmd
func addOperationTodosFindTodosCmd(opCmd *cobra.Command) error {
	apiCmd := &cobra.Command{
		Use:   "findTodos",
		Short: ``,
		RunE:  runOperationTodosFindTodos,
	}

	if err := registerOperationTodosFindTodosParamFlags(apiCmd); err != nil {
		return err
	}

	opCmd.AddCommand(apiCmd)

	return nil
}

// runOperationTodosFindTodos uses cmd flags to call endpoint api
func runOperationTodosFindTodos(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}

	params := todos.NewFindTodosParams()
	// prepare params

	{
		// only set the param if user set the flag
		if cmd.Flags().Changed("limit") {
			temp, err := cmd.Flags().GetInt32("limit")
			if err != nil {
				return err
			}

			// set params
			params.Limit = &temp
		}

	}
	{
		// only set the param if user set the flag
		if cmd.Flags().Changed("since") {
			temp, err := cmd.Flags().GetInt64("since")
			if err != nil {
				return err
			}

			// set params
			params.Since = &temp
		}

	}

	res, err := appCli.Todos.FindTodos(params, nil)

	if err != nil {
		return err
	}

	// TODO: output payload properly, and handle error properly
	// output result
	log.Printf("%+v", res)
	msg, err := json.Marshal(res)
	if err == nil {
		fmt.Println(string(msg))
	}
	return nil
}

// registerOperationTodosFindTodosParamFlags registers all flags needed to fill params
func registerOperationTodosFindTodosParamFlags(cmd *cobra.Command) error {

	{
		// int32, default value is the zero value of the type.
		_ = cmd.PersistentFlags().Int32("limit", 20, "")

	}

	{
		// int64, default value is the zero value of the type.
		_ = cmd.PersistentFlags().Int64("since", 0, "")

	}

	return nil
}
