// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"log"

	"github.com/go-swagger/go-swagger/examples/tutorials/todo-list/cli/code/client"
	"github.com/go-swagger/go-swagger/examples/tutorials/todo-list/cli/code/client/todos"
	"github.com/go-swagger/go-swagger/examples/tutorials/todo-list/cli/code/models"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

var handler *Handler

type Handler struct {
	appClient *client.AToDoListApplication
	params    interface{} // save the built params
	auth      runtime.ClientAuthInfoWriter
}

func getGlobalHandler() *Handler {
	return handler
}

func setGlobalHandler(h *Handler) {
	handler = h
}

func makeClient(cmd *cobra.Command, args []string) (*client.AToDoListApplication, error) {

	hostname, err := cmd.Flags().GetString("hostname")
	if err != nil {
		return nil, err
	}
	scheme, err := cmd.Flags().GetString("scheme")
	if err != nil {
		return nil, err
	}

	r := httptransport.New(hostname, client.DefaultBasePath, []string{scheme})

	// add custom producer and consumer if found
	// detect costom json producer and consumer

	r.Consumers["application/io.goswagger.examples.todo-list.v1+json"] = runtime.JSONConsumer()

	r.Producers["application/io.goswagger.examples.todo-list.v1+json"] = runtime.JSONProducer()

	auth, err := makeAuthInfoWriter(cmd)
	if err != nil {
		return nil, err
	}
	r.DefaultAuthentication = auth

	appCli := client.New(r, strfmt.Default)
	log.Printf("client is constructed using %v://%v", scheme, hostname)
	return appCli, nil
}

func MakeRootCmd() *cobra.Command {

	rootCmd := &cobra.Command{
		Use:   "AToDoListApplication",
		Short: "AToDoListApplication",
		Long:  `todo`,
	}

	// add flags
	rootCmd.PersistentFlags().String("hostname", client.DefaultHost, "hostname of the service")
	rootCmd.PersistentFlags().String("scheme", client.DefaultSchemes[0], fmt.Sprintf("Choose from: %v", client.DefaultSchemes))

	// add security flags
	rootCmd.PersistentFlags().String("x-todolist-token", "none", ``)

	addOperationGroupTodosCmds(rootCmd)

	return rootCmd
}
func makeAuthInfoWriter(cmd *cobra.Command) (runtime.ClientAuthInfoWriter, error) {
	/* */
	key, err := cmd.Flags().GetString("x-todolist-token")
	if err != nil {
		return nil, err
	}
	return httptransport.APIKeyAuth("x-todolist-token", "header", key), nil
}
func addOperationGroupTodosCmds(rootCmd *cobra.Command) {
	// for each operation add a command
	operationGroupCmd := &cobra.Command{
		Use:   "Todos",
		Short: "Todos",
	}

	addOperationTodosAddOneCmd(operationGroupCmd)

	addOperationTodosDestroyOneCmd(operationGroupCmd)

	addOperationTodosFindTodosCmd(operationGroupCmd)

	addOperationTodosUpdateOneCmd(operationGroupCmd)

	rootCmd.AddCommand(operationGroupCmd)
}

func addOperationTodosAddOneCmd(opCmd *cobra.Command) {
	apiCmd := &cobra.Command{
		Use:   "AddOne",
		Short: ``,
		RunE:  runOperationAddOne,
	}

	if err := registerOperationAddOneParamFlags(apiCmd); err != nil {
		panic(err)
	}

	opCmd.AddCommand(apiCmd)
}

func runOperationAddOne(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}

	params := todos.NewAddOneParams()
	// prepare params

	{
		// only set the param if user set the flag
		if cmd.Flags().Changed("Body") {
			// struct Body. Read the string from cmd and unmarshal
			tempStr, err := cmd.Flags().GetString("Body")
			if err != nil {
				return err
			}
			temp := models.Item{}
			if err := temp.UnmarshalBinary([]byte(tempStr)); err != nil {
				return err
			}
			fmt.Printf("body is set unmarshal")

			// set params
			params.Body = &temp
		}
		// recurse on model
		tempModel := params.Body
		if swag.IsZero(tempModel) {
			tempModel = &models.Item{}
		}
		err, added := execItemCmd(tempModel, "Item", cmd)
		if err != nil {
			return err
		}
		if added {
			params.Body = tempModel
		}

	}

	res, err := appCli.Todos.AddOne(params, nil)

	if err != nil {
		return err
	}
	log.Printf("%+v", res)
	msg, err := json.Marshal(res)
	if err == nil {
		log.Printf("Json Resp: ", string(msg))
	}
	return nil
}

func registerOperationAddOneParamFlags(cmd *cobra.Command) error {

	{
		// models.Item, default value is the zero value of the type.
		// struct Body. Read the string from cmd and unmarshal
		temp := &models.Item{}
		exampleStr, err := temp.MarshalBinary()
		if err != nil {
			return err
		}
		// TODO: give better example str
		_ = cmd.PersistentFlags().String("body", "", fmt.Sprintf("Optional json string for Body of form %v.", string(exampleStr)))

		// recurse on model
		addItemCmd("Item", cmd)
	}

	return nil
}

func addOperationTodosDestroyOneCmd(opCmd *cobra.Command) {
	apiCmd := &cobra.Command{
		Use:   "DestroyOne",
		Short: ``,
		RunE:  runOperationDestroyOne,
	}

	if err := registerOperationDestroyOneParamFlags(apiCmd); err != nil {
		panic(err)
	}

	opCmd.AddCommand(apiCmd)
}

func runOperationDestroyOne(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}

	params := todos.NewDestroyOneParams()
	// prepare params

	{
		// only set the param if user set the flag
		if cmd.Flags().Changed("ID") {
			temp, err := cmd.Flags().GetInt64("ID")
			if err != nil {
				return err
			}

			// set params
			params.ID = temp
		}

	}

	res, err := appCli.Todos.DestroyOne(params, nil)

	if err != nil {
		return err
	}
	log.Printf("%+v", res)
	msg, err := json.Marshal(res)
	if err == nil {
		log.Printf("Json Resp: ", string(msg))
	}
	return nil
}

func registerOperationDestroyOneParamFlags(cmd *cobra.Command) error {

	{
		// int64, default value is the zero value of the type.
		_ = cmd.PersistentFlags().Int64("id", 0, "Required. ")

		if err := cmd.MarkPersistentFlagRequired("id"); err != nil {
			return err
		}

	}

	return nil
}

func addOperationTodosFindTodosCmd(opCmd *cobra.Command) {
	apiCmd := &cobra.Command{
		Use:   "FindTodos",
		Short: ``,
		RunE:  runOperationFindTodos,
	}

	if err := registerOperationFindTodosParamFlags(apiCmd); err != nil {
		panic(err)
	}

	opCmd.AddCommand(apiCmd)
}

func runOperationFindTodos(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}

	params := todos.NewFindTodosParams()
	// prepare params

	{
		// only set the param if user set the flag
		if cmd.Flags().Changed("Limit") {
			temp, err := cmd.Flags().GetInt32("Limit")
			if err != nil {
				return err
			}

			// set params
			params.Limit = &temp
		}

	}
	{
		// only set the param if user set the flag
		if cmd.Flags().Changed("Since") {
			temp, err := cmd.Flags().GetInt64("Since")
			if err != nil {
				return err
			}

			// set params
			params.Since = &temp
		}

	}

	res, err := appCli.Todos.FindTodos(params, nil)

	if err != nil {
		return err
	}
	log.Printf("%+v", res)
	msg, err := json.Marshal(res)
	if err == nil {
		log.Printf("Json Resp: ", string(msg))
	}
	return nil
}

func registerOperationFindTodosParamFlags(cmd *cobra.Command) error {

	{
		// int32, default value is the zero value of the type.
		_ = cmd.PersistentFlags().Int32("limit", 20, "")

	}

	{
		// int64, default value is the zero value of the type.
		_ = cmd.PersistentFlags().Int64("since", 0, "")

	}

	return nil
}

func addOperationTodosUpdateOneCmd(opCmd *cobra.Command) {
	apiCmd := &cobra.Command{
		Use:   "UpdateOne",
		Short: ``,
		RunE:  runOperationUpdateOne,
	}

	if err := registerOperationUpdateOneParamFlags(apiCmd); err != nil {
		panic(err)
	}

	opCmd.AddCommand(apiCmd)
}

func runOperationUpdateOne(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}

	params := todos.NewUpdateOneParams()
	// prepare params

	{
		// only set the param if user set the flag
		if cmd.Flags().Changed("Body") {
			// struct Body. Read the string from cmd and unmarshal
			tempStr, err := cmd.Flags().GetString("Body")
			if err != nil {
				return err
			}
			temp := models.Item{}
			if err := temp.UnmarshalBinary([]byte(tempStr)); err != nil {
				return err
			}
			fmt.Printf("body is set unmarshal")

			// set params
			params.Body = &temp
		}
		// recurse on model
		tempModel := params.Body
		if swag.IsZero(tempModel) {
			tempModel = &models.Item{}
		}
		err, added := execItemCmd(tempModel, "Item", cmd)
		if err != nil {
			return err
		}
		if added {
			params.Body = tempModel
		}

	}
	{
		// only set the param if user set the flag
		if cmd.Flags().Changed("ID") {
			temp, err := cmd.Flags().GetInt64("ID")
			if err != nil {
				return err
			}

			// set params
			params.ID = temp
		}

	}

	res, err := appCli.Todos.UpdateOne(params, nil)

	if err != nil {
		return err
	}
	log.Printf("%+v", res)
	msg, err := json.Marshal(res)
	if err == nil {
		log.Printf("Json Resp: ", string(msg))
	}
	return nil
}

func registerOperationUpdateOneParamFlags(cmd *cobra.Command) error {

	{
		// models.Item, default value is the zero value of the type.
		// struct Body. Read the string from cmd and unmarshal
		temp := &models.Item{}
		exampleStr, err := temp.MarshalBinary()
		if err != nil {
			return err
		}
		// TODO: give better example str
		_ = cmd.PersistentFlags().String("body", "", fmt.Sprintf("Optional json string for Body of form %v.", string(exampleStr)))

		// recurse on model
		addItemCmd("Item", cmd)
	}

	{
		// int64, default value is the zero value of the type.
		_ = cmd.PersistentFlags().Int64("id", 0, "Required. ")

		if err := cmd.MarkPersistentFlagRequired("id"); err != nil {
			return err
		}

	}

	return nil
}
