// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"log"

	"github.com/go-swagger/go-swagger/examples/tutorials/todo-list/cli/code/client"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/spf13/cobra"
)

// makeClient constructs a client object
func makeClient(cmd *cobra.Command, args []string) (*client.AToDoListApplication, error) {

	hostname, err := cmd.Flags().GetString("hostname")
	if err != nil {
		return nil, err
	}
	scheme, err := cmd.Flags().GetString("scheme")
	if err != nil {
		return nil, err
	}

	r := httptransport.New(hostname, client.DefaultBasePath, []string{scheme})

	// add custom producer and consumer if found
	// detect costom json producer and consumer

	r.Consumers["application/io.goswagger.examples.todo-list.v1+json"] = runtime.JSONConsumer()

	r.Producers["application/io.goswagger.examples.todo-list.v1+json"] = runtime.JSONProducer()

	auth, err := makeAuthInfoWriter(cmd)
	if err != nil {
		return nil, err
	}
	r.DefaultAuthentication = auth

	appCli := client.New(r, strfmt.Default)
	log.Printf("client is constructed using %v://%v", scheme, hostname)
	return appCli, nil
}

// MakeRootCmd returns the root cmd
func MakeRootCmd() (*cobra.Command, error) {

	rootCmd := &cobra.Command{
		Use:   "AToDoListApplication",
		Short: "AToDoListApplication",
		Long:  `todo`,
	}
	rootCmd.PersistentFlags().String("hostname", client.DefaultHost, "hostname of the service")
	rootCmd.PersistentFlags().String("scheme", client.DefaultSchemes[0], fmt.Sprintf("Choose from: %v", client.DefaultSchemes))

	// add security flags
	/* */
	rootCmd.PersistentFlags().String("x-todolist-token", "none", ``)

	if err := addOperationGroupTodosCmds(rootCmd); err != nil {
		return nil, err
	}

	return rootCmd, nil
}

// makeAuthInfoWriter retrieves cmd flags and construct an auth info writer
func makeAuthInfoWriter(cmd *cobra.Command) (runtime.ClientAuthInfoWriter, error) {
	/* */
	key, err := cmd.Flags().GetString("x-todolist-token")
	if err != nil {
		return nil, err
	}
	return httptransport.APIKeyAuth("x-todolist-token", "header", key), nil
}

func addOperationGroupTodosCmds(rootCmd *cobra.Command) error {
	// for each operation add a command
	operationGroupCmd := &cobra.Command{
		Use:   "todos",
		Short: "todos",
	}

	if err := addOperationTodosAddOneCmd(operationGroupCmd); err != nil {
		return err
	}

	if err := addOperationTodosDestroyOneCmd(operationGroupCmd); err != nil {
		return err
	}

	if err := addOperationTodosFindTodosCmd(operationGroupCmd); err != nil {
		return err
	}

	if err := addOperationTodosUpdateOneCmd(operationGroupCmd); err != nil {
		return err
	}

	rootCmd.AddCommand(operationGroupCmd)
	return nil
}
