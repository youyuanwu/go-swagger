// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"log"

	"github.com/go-swagger/go-swagger/examples/tutorials/todo-list/cli/code/client/todos"
	"github.com/go-swagger/go-swagger/examples/tutorials/todo-list/cli/code/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// addOperationTodosAddOneCmd adds sub commands to operation opCmd
func addOperationTodosAddOneCmd(opCmd *cobra.Command) error {
	apiCmd := &cobra.Command{
		Use:   "addOne",
		Short: ``,
		RunE:  runOperationTodosAddOne,
	}

	if err := registerOperationTodosAddOneParamFlags(apiCmd); err != nil {
		return err
	}

	opCmd.AddCommand(apiCmd)

	return nil
}

// runOperationTodosAddOne uses cmd flags to call endpoint api
func runOperationTodosAddOne(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}

	params := todos.NewAddOneParams()
	// prepare params

	{
		// only set the param if user set the flag
		if cmd.Flags().Changed("body") {
			// struct Body. Read the string from cmd and unmarshal
			tempStr, err := cmd.Flags().GetString("body")
			if err != nil {
				return err
			}
			temp := models.Item{}
			if err := temp.UnmarshalBinary([]byte(tempStr)); err != nil {
				return err
			}
			fmt.Printf("body is set unmarshal")

			// set params
			params.Body = &temp
		}
		// recurse on model
		tempModel := params.Body
		if swag.IsZero(tempModel) {
			tempModel = &models.Item{}
		}
		err, added := retrieveItemFlags(tempModel, "item", cmd)
		if err != nil {
			return err
		}
		if added {
			params.Body = tempModel
		}

	}

	res, err := appCli.Todos.AddOne(params, nil)

	if err != nil {
		return err
	}

	// TODO: output payload properly, and handle error properly
	// output result
	log.Printf("%+v", res)
	msg, err := json.Marshal(res)
	if err == nil {
		fmt.Println(string(msg))
	}
	return nil
}

// registerOperationTodosAddOneParamFlags registers all flags needed to fill params
func registerOperationTodosAddOneParamFlags(cmd *cobra.Command) error {

	{
		// models.Item, default value is the zero value of the type.
		// struct Body. Read the string from cmd and unmarshal
		temp := &models.Item{}
		exampleStr, err := temp.MarshalBinary()
		if err != nil {
			return err
		}
		// TODO: give better example str
		_ = cmd.PersistentFlags().String("body", "", fmt.Sprintf("Optional json string for body of form %v.", string(exampleStr)))

		// add flags for body
		addItemCmd("item", cmd)
	}

	return nil
}
