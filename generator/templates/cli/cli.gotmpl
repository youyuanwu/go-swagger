// Code generated by go-swagger; DO NOT EDIT.


{{ if .Copyright -}}// {{ comment .Copyright -}}{{ end }}


package {{ .GenOpts.CliPackage }}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
    {{ imports .DefaultImports }}
    {{ imports .Imports }}

    "github.com/spf13/cobra"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	httptransport "github.com/go-openapi/runtime/client"
)

// makeClient constructs a client object
func makeClient(cmd *cobra.Command, args []string) (*client.{{ pascalize .Name }}, error) {

	hostname, err := cmd.Flags().GetString("hostname")
	if err != nil {
		return nil, err
	}
	scheme, err := cmd.Flags().GetString("scheme")
	if err != nil {
		return nil, err
	}

	r := httptransport.New(hostname, client.DefaultBasePath, []string{scheme})
	
	// add custom producer and consumer if found
	// detect costom json producer and consumer
	{{ range .Consumes }}
		{{- if stringContains .MediaType "json" }}
		r.Consumers["{{ .MediaType }}"] = runtime.JSONConsumer()
		{{- else }}
		// warning: consumes {{ .MediaType }} is not supported
		{{- end }}
	{{ end }}
	{{ range .Produces }}
		{{- if stringContains .MediaType "json" }}
		r.Producers["{{ .MediaType }}"] = runtime.JSONProducer()
		{{- else }}
		// warning: produces {{ .MediaType }} is not supported
		{{- end }}
	{{ end }}

	{{- if .SecurityDefinitions }}
	auth, err := makeAuthInfoWriter(cmd)
	if err != nil {
		return nil, err
	}
	r.DefaultAuthentication = auth
	{{ end }}
	appCli := client.New(r, strfmt.Default)
	log.Printf("client is constructed using %v://%v", scheme, hostname)
	return appCli, nil
}

// MakeRootCmd returns the root cmd
func MakeRootCmd() (*cobra.Command, error) {

	rootCmd := &cobra.Command{
		Use:   "{{.Name}}",
		Short: "{{.Name}}",
		Long:  `todo`,
	}
	rootCmd.PersistentFlags().String("hostname", client.DefaultHost, "hostname of the service")
	rootCmd.PersistentFlags().String("scheme", client.DefaultSchemes[0], fmt.Sprintf("Choose from: %v", client.DefaultSchemes))

	// add security flags
	{{- if .SecurityDefinitions }}
	{{- range .SecurityDefinitions }}
		/* {{.Description}}*/
		{{- if .IsBasicAuth }}
	rootCmd.PersistentFlags().String("usr", "usr", "username")
	rootCmd.PersistentFlags().String("pwd", "pwd", "password")
    	{{- else if .IsAPIKeyAuth }}
	rootCmd.PersistentFlags().String("{{.Name}}", "none", `{{.Description}}`)
    	{{- else if .IsOAuth2 }}
  TODO: (youyuan)
    	{{- end }}
  {{- end }}
{{- end }}

{{ range .OperationGroups -}}
	if err := addOperationGroup{{ pascalize .Name }}Cmds(rootCmd); err != nil{
		return nil, err
	}
{{ end }}
	return rootCmd, nil
}

{{- if .SecurityDefinitions }}
// makeAuthInfoWriter retrieves cmd flags and construct an auth info writer
func makeAuthInfoWriter(cmd *cobra.Command) (runtime.ClientAuthInfoWriter, error) {
  {{- range .SecurityDefinitions }}
	/* {{.Description}}*/
	{{- if .IsBasicAuth }}
// TODO: (youyuan)
    {{- else if .IsAPIKeyAuth }}
	key, err := cmd.Flags().GetString("{{.Name}}")
	if err != nil {
		return nil, err
	}
	return httptransport.APIKeyAuth("{{.Name}}", "{{.In}}", key), nil
    {{- else if .IsOAuth2 }}
//  TODO: (youyuan)
	{{- else }}
	return nil, nil
    {{- end }}
  {{- end }}
}
{{- end }}

{{ range .OperationGroups -}}
func addOperationGroup{{ pascalize .Name }}Cmds(rootCmd *cobra.Command) error {
	// for each operation add a command
	operationGroupCmd := &cobra.Command{
		Use:   "{{ .Name }}",
		Short: "{{ .Name }}",
	}
{{ range .Operations }}
	if err := addOperation{{pascalize .Package}}{{ pascalize .Name }}Cmd(operationGroupCmd); err != nil{
		return err
	}
{{ end }}
	rootCmd.AddCommand(operationGroupCmd)
	return nil
}
{{ end }} {{/*operation group*/}}