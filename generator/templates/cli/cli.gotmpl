// Code generated by go-swagger; DO NOT EDIT.


{{ if .Copyright -}}// {{ comment .Copyright -}}{{ end }}


package {{ .GenOpts.CliPackage }}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
    {{ imports .DefaultImports }}
    {{ imports .Imports }}

    "github.com/spf13/cobra"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	httptransport "github.com/go-openapi/runtime/client"
)

var handler *Handler

type Handler struct {
	appClient   *client.AToDoListApplication
	params      interface{} // save the built params
	auth  		runtime.ClientAuthInfoWriter
}

func getGlobalHandler() *Handler {
	return handler
}

func setGlobalHandler(h *Handler) {
	handler = h
}

func makeClient(cmd *cobra.Command, args []string) (*client.AToDoListApplication, error) {

	hostname, err := cmd.Flags().GetString("hostname")
	if err != nil {
		return nil, err
	}
	scheme, err := cmd.Flags().GetString("scheme")
	if err != nil {
		return nil, err
	}

	r := httptransport.New(hostname, client.DefaultBasePath, []string{scheme})
	
	// add custom producer and consumer if found
	// detect costom json producer and consumer
	{{ range .Consumes }}
		{{- if stringContains .MediaType "json" }}
		r.Consumers["{{ .MediaType }}"] = runtime.JSONConsumer()
		{{- else }}
		// warning: consumes {{ .MediaType }} is not supported
		{{- end }}
	{{ end }}
	{{ range .Produces }}
		{{- if stringContains .MediaType "json" }}
		r.Producers["{{ .MediaType }}"] = runtime.JSONProducer()
		{{- else }}
		// warning: produces {{ .MediaType }} is not supported
		{{- end }}
	{{ end }}

	{{- if .SecurityDefinitions }}
	auth, err := makeAuthInfoWriter(cmd)
	if err != nil {
		return nil, err
	}
	r.DefaultAuthentication = auth
	{{ end }}
	appCli := client.New(r, strfmt.Default)
	log.Printf("client is constructed using %v://%v", scheme, hostname)
	return appCli, nil
}

func MakeRootCmd() *cobra.Command {

	rootCmd := &cobra.Command{
		Use:   "{{.Name}}",
		Short: "{{.Name}}",
		Long:  `todo`,
	}

	// add flags
	rootCmd.PersistentFlags().String("hostname", client.DefaultHost, "hostname of the service")
	rootCmd.PersistentFlags().String("scheme", client.DefaultSchemes[0], fmt.Sprintf("Choose from: %v", client.DefaultSchemes))

	// add security flags
	{{- if .SecurityDefinitions }}
	{{- range .SecurityDefinitions }}
		{{- if .IsBasicAuth }}
	/* {{.Description}}*/
	rootCmd.PersistentFlags().String("usr", "usr", "username")
	rootCmd.PersistentFlags().String("pwd", "pwd", "password")
    	{{- else if .IsAPIKeyAuth }}
	rootCmd.PersistentFlags().String("{{.Name}}", "none", `{{.Description}}`)
    	{{- else if .IsOAuth2 }}
  TODO: (youyuan)
    	{{- end }}
  {{- end }}
{{- end }}

{{ range .OperationGroups -}}
	addOperationGroup{{ pascalize .Name }}Cmds(rootCmd) 
{{ end }}
	return rootCmd
}

{{- if .SecurityDefinitions }}
func makeAuthInfoWriter(cmd *cobra.Command) (runtime.ClientAuthInfoWriter, error) {
  {{- range .SecurityDefinitions }}
	/* {{.Description}}*/
	{{- if .IsBasicAuth }}
// TODO: (youyuan)
    {{- else if .IsAPIKeyAuth }}
	key, err := cmd.Flags().GetString("{{.Name}}")
	if err != nil {
		return nil, err
	}
	return httptransport.APIKeyAuth("{{.Name}}", "{{.In}}", key), nil
    {{- else if .IsOAuth2 }}
//  TODO: (youyuan)
	{{- else }}
	return nil, nil
    {{- end }}
  {{- end }}
}
{{- end }}

{{- $package := .Package }}
{{- $apipackagealias := .APIPackageAlias }}
{{ range .OperationGroups -}}
func addOperationGroup{{ pascalize .Name }}Cmds(rootCmd *cobra.Command) {
	// for each operation add a command
	operationGroupCmd := &cobra.Command{
		Use:   "{{ pascalize .Name }}",
		Short: "{{ pascalize .Name }}",
	}
{{ range .Operations }}
	addOperation{{ if ne .Package $package }}{{pascalize .Package}}{{ end }}{{ pascalize .Name }}Cmd(operationGroupCmd)
{{ end }}
	rootCmd.AddCommand(operationGroupCmd)
}

{{- $operationGroupName := .Name }}
{{ range .Operations }}
func addOperation{{ if ne .Package $package }}{{pascalize .Package}}{{ end }}{{ pascalize .Name }}Cmd(opCmd *cobra.Command) {
	apiCmd := &cobra.Command{
		Use:   "{{ pascalize .Name }}",
		Short: `{{.Description}}`,
		RunE: runOperation{{ pascalize .Name }},
	}

	if err := registerOperation{{ pascalize .Name }}ParamFlags(apiCmd); err != nil{
		panic(err)
	}

	opCmd.AddCommand(apiCmd)
}

func runOperation{{ pascalize .Name }}(cmd *cobra.Command, args []string) error{
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}

	params := {{ if ne .Package $package }}{{ .PackageAlias }}{{ else }}{{- $apipackagealias }}{{ end }}.New{{ pascalize .Name}}Params()
// prepare params
{{ range .Params }}
	{ 
	{{- $flagStr := (pascalize .ID) }}
		// only set the param if user set the flag
		if cmd.Flags().Changed("{{ $flagStr }}") {
	{{- if .IsPrimitive }}
			temp, err := cmd.Flags().Get{{pascalize .GoType}}("{{ $flagStr }}")
			if err != nil{
				return err
			}
	{{- else if and .IsBodyParam .Schema  }}
			// struct {{.ID}}. Read the string from cmd and unmarshal
			tempStr, err := cmd.Flags().GetString("{{ $flagStr }}")
			if err != nil{
				return err
			}
			temp := {{.GoType}}{}
			if err := temp.UnmarshalBinary([]byte(tempStr)); err!= nil{
				return err
			}
			fmt.Printf("body is set unmarshal")
	{{- else }}
			// TODO: {{.GoType}} not supported
	{{- end }}

			// set params
	{{- if .IsNullable }}
			params.{{ .ID }} = &temp
	{{- else }}
			params.{{ .ID }} = temp
	{{- end }}
		}

		{{- if and .IsBodyParam .Schema }}
		// recurse on model
		tempModel := params.{{ .ID }}
		if swag.IsZero(tempModel){
			tempModel = {{- if .IsNullable }}&{{- end }}{{.GoType}}{}
		}
		err,added := exec{{ pascalize (dropPackage .GoType) }}Cmd(tempModel, "{{ pascalize (dropPackage .GoType) }}", cmd)
		if err != nil{
			return err
		}
		if added {
			params.{{.ID}} = tempModel
		}
		{{- end }}
		
	}
{{- end }}

{{if .Authorized}}
	res, err := appCli.{{- pascalize $operationGroupName }}.{{ pascalize .Name }}(params, nil)
{{ else }}
	res, err := appCli.{{- pascalize $operationGroupName }}.{{ pascalize .Name }}(params)
{{ end }}
	if err != nil {
		return err
	}
	log.Printf("%+v", res)
	msg, err := json.Marshal(res)
	if err == nil {
		log.Printf("Json Resp: ", string(msg))
	}
	return nil
}

func registerOperation{{ pascalize .Name }}ParamFlags(cmd *cobra.Command) error {
{{ range .Params }}
	{ 
	// {{ .GoType }}, default value is the zero value of the type.
	{{- $fullDescription := "" }}
	{{- if .Required}}
		{{- $fullDescription = printf "Required. %v" .Description}}
	{{- else}}
		{{- $fullDescription = printf "%v" .Description}}
	{{- end}}
	{{- if eq .GoType "int64" }}
		_ = cmd.PersistentFlags().Int64("{{ camelize .ID }}", {{ if .HasDefault }}{{ printf "%#v" .Default }}{{else}}0{{end}}, "{{ $fullDescription }}")
	{{- else if eq .GoType "int32" }}
		_ = cmd.PersistentFlags().Int32("{{ camelize .ID }}", {{ if .HasDefault }}{{ printf "%#v" .Default }}{{else}}0{{end}}, "{{ $fullDescription }}")
	{{- else if eq .GoType "string" }}
		_ = cmd.PersistentFlags().String("{{ camelize .ID }}", {{ if .HasDefault }}{{ printf "%#v" .Default }}{{else}}""{{end}}, "{{ $fullDescription }}")
	{{- else if eq .GoType "float32" }}
		_ = cmd.PersistentFlags().Float32("{{ camelize .ID }}", {{ if .HasDefault }}{{ printf "%#v" .Default }}{{else}}0{{end}}, "{{ $fullDescription }}")
	{{- else if eq .GoType "bool" }}
		_ = cmd.PersistentFlags().Bool("{{ camelize .ID }}", {{ if .HasDefault }}{{ printf "%#v" .Default }}{{else}}false{{end}}, "{{ $fullDescription }}")
	{{- else }}
		{{- if and .IsBodyParam .Schema }}
			// struct {{.ID}}. Read the string from cmd and unmarshal
			temp := &{{.GoType}}{}
			exampleStr,err := temp.MarshalBinary()
			if err != nil {
				return err
			}
			// TODO: give better example str
			_ = cmd.PersistentFlags().String("{{ camelize .ID }}", "", fmt.Sprintf("Optional json string for {{.ID}} of form %v.{{ .Description }}", string(exampleStr)))
		{{- else }}
			// warning: go type {{ .GoType }} is not supported by cli. Please raise a issue
			temp := &{{.GoType}}{}
		{{- end }}

	{{- end }}

	{{/* mark required param for the flag, but not body string */}}
	{{- if and .Required (not (and .IsBodyParam .Schema))}}
		if err := cmd.MarkPersistentFlagRequired("{{ camelize .ID }}"); err != nil{
			return err
		}
	{{ end }}
	{{- if and .IsBodyParam .Schema }}
		// recurse on model
		add{{ pascalize (dropPackage .GoType) }}Cmd("{{ pascalize (dropPackage .GoType) }}", cmd)
	{{- end }}
	}
{{ end }}
	return nil
}

{{ end }} {{/*operation*/}}
{{ end }} {{/*operation group*/}}