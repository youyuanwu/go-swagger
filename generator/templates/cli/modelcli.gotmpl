// Code generated by go-swagger; DO NOT EDIT.


{{ if .Copyright -}}// {{ comment .Copyright -}}{{ end }}


package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command


import (
	{{ imports .DefaultImports }}
    {{ imports .Imports }}
	"github.com/spf13/cobra"
)

// register flags to command
func add{{pascalize .Name}}Cmd(cmdPrefix string, cmd *cobra.Command) error {
	{{ range .AllOf }}
    // allOf {{.Name}}
    {{ end }}
    {{ range .Properties }}
    // property {{.Name}}
    // TODO: not copy paste
    { 
        {{- $fullDescription := "" }}
		{{- if .Required}}
			{{- $fullDescription = printf "Required. %v" .Description}}
		{{- else}}
			{{- $fullDescription = printf "%v" .Description}}
		{{- end}}
        cmdString := fmt.Sprintf("%v.{{ .Name }}", cmdPrefix)
        {{- if .IsPrimitive }}
            {{- if eq .GoType "int64" }}
                _ = cmd.PersistentFlags().Int64(cmdString, {{ if .Default }}{{ printf "%#v" .Default }}{{else}}0{{end}}, "{{ $fullDescription }}")
            {{- else if eq .GoType "int32" }}
                _ = cmd.PersistentFlags().Int32(cmdString, {{ if .Default }}{{ printf "%#v" .Default }}{{else}}0{{end}}, "{{ $fullDescription }}")
            {{- else if eq .GoType "string" }}
                _ = cmd.PersistentFlags().String(cmdString, {{ if .Default }}{{ printf "%#v" .Default }}{{else}}""{{end}}, "{{ $fullDescription }}")
            {{- else if eq .GoType "float32" }}
                _ = cmd.PersistentFlags().Float32(cmdString, {{ if .Default }}{{ printf "%#v" .Default }}{{else}}0{{end}}, "{{ $fullDescription }}")
            {{- else if eq .GoType "bool" }}
                _ = cmd.PersistentFlags().Bool(cmdString, {{ if .Default }}{{ printf "%#v" .Default }}{{else}}false{{end}}, "{{ $fullDescription }}")
            {{- else }}
                // warning {{.Name}} {{.GoType}}is not supported in cli
            {{- end }}
        {{- else if .IsArray }}
            // array TODO
        {{- else if .IsMap }}
            // map TODO
        {{- else }}
            // struct
            add{{.Name}}Cmd(cmdString, cmd)
        {{- end }}

		{{/* mark required param for the flag */}}
		{{- if .Required }}
			if err := cmd.MarkPersistentFlagRequired(cmdString); err != nil{
				return err
			}
		{{ end }}	
    }
    {{ end }}
    return nil
}


// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieve{{pascalize .Name}}Flags({{.ReceiverName}} *{{.Package}}.{{.GoType}}, cmdPrefix string, cmd *cobra.Command) (error, bool) {
    retAdded := false
	{{ range .AllOf }}
    // allOf {{.Name}}
    {{ end }}
    {{ range .Properties }}
    // property {{.Name}}
    { 
        cmdString := fmt.Sprintf("%v.{{ .Name }}", cmdPrefix)
        if cmd.Flags().Changed(cmdString) { // only 
        {{- if .IsPrimitive }}
            temp, err := cmd.Flags().Get{{pascalize .GoType}}(cmdString)
        {{- else if .IsArray }}
            // array TODO
        {{- else if .IsMap }}
            // map TODO
        {{- else }}
            // struct
            temp := {{.Package}}.{{.GoType}}{}
            err, added := exec{{.Name}}Cmd(temp, cmdString, cmd)
            retAdded = retAdded || added
        {{- end }}
        if err != nil{
            return err, false
        }
		{{- if .IsNullable }}
			{{.ReceiverName}}.{{ pascalize .Name }} = &temp
		{{- else }}
			{{.ReceiverName}}.{{ pascalize .Name }} = temp
		{{- end }}
            retAdded = true
		}
    }
    {{ end }}
    return nil, retAdded
}