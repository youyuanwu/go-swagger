// Code generated by go-swagger; DO NOT EDIT.


{{ if .Copyright -}}// {{ comment .Copyright -}}{{ end }}

{{/*TODO: pass cli pkg*/}}
package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
    {{ imports .DefaultImports }}
    {{ imports .Imports }}

    "github.com/spf13/cobra"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	httptransport "github.com/go-openapi/runtime/client"
)

// addOperation{{pascalize .Package}}{{ pascalize .Name }}Cmd adds sub commands to operation opCmd
func addOperation{{pascalize .Package}}{{ pascalize .Name }}Cmd(opCmd *cobra.Command) error {
	apiCmd := &cobra.Command{
		Use:   "{{ .Name }}",
		Short: `{{.Description}}`,
		RunE: runOperation{{pascalize .Package}}{{ pascalize .Name }},
	}

	if err := registerOperation{{pascalize .Package}}{{ pascalize .Name }}ParamFlags(apiCmd); err != nil{
		return err
	}

	opCmd.AddCommand(apiCmd)

	return nil
}

// runOperation{{pascalize .Package}}{{ pascalize .Name }} uses cmd flags to call endpoint api
func runOperation{{pascalize .Package}}{{ pascalize .Name }}(cmd *cobra.Command, args []string) error{
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}

	params := {{ .PackageAlias }}.New{{ pascalize .Name}}Params()
// prepare params
{{ range .Params }}
	{ 
	{{- $flagStr := .Name }}
		// only set the param if user set the flag
		if cmd.Flags().Changed("{{ $flagStr }}") {
	{{- if .IsPrimitive }}
			temp, err := cmd.Flags().Get{{pascalize .GoType}}("{{ $flagStr }}")
			if err != nil{
				return err
			}
	{{- else if and .IsBodyParam .Schema  }}
			// struct {{.ID}}. Read the string from cmd and unmarshal
			tempStr, err := cmd.Flags().GetString("{{ $flagStr }}")
			if err != nil{
				return err
			}
			temp := {{.GoType}}{}
			if err := temp.UnmarshalBinary([]byte(tempStr)); err!= nil{
				return err
			}
			fmt.Printf("body is set unmarshal")
	{{- else }}
			// TODO: {{.GoType}} not supported
	{{- end }}

			// set params
	{{- if .IsNullable }}
			params.{{ .ID }} = &temp
	{{- else }}
			params.{{ .ID }} = temp
	{{- end }}
		}

		{{- if and .IsBodyParam .Schema }}
		// recurse on model
		tempModel := params.{{ .ID }}
		if swag.IsZero(tempModel){
			tempModel = {{- if .IsNullable }}&{{- end }}{{.GoType}}{}
		}
		err,added := retrieve{{ pascalize (dropPackage .GoType) }}Flags(tempModel, "{{ camelize (dropPackage .GoType) }}", cmd)
		if err != nil{
			return err
		}
		if added {
			params.{{.ID}} = tempModel
		}
		{{- end }}
		
	}
{{- end }}

{{/*Package string is the operation name*/}}
{{if .Authorized}}
	res, err := appCli.{{- pascalize .Package }}.{{ pascalize .Name }}(params, nil)
{{ else }}
	res, err := appCli.{{- pascalize .Package }}.{{ pascalize .Name }}(params)
{{ end }}
	if err != nil {
		return err
	}

	// TODO: output payload properly, and handle error properly
	// output result
	log.Printf("%+v", res)
	msg, err := json.Marshal(res)
	if err == nil {
		fmt.Println(string(msg))
	}
	return nil
}

// registerOperation{{pascalize .Package}}{{ pascalize .Name }}ParamFlags registers all flags needed to fill params
func registerOperation{{pascalize .Package}}{{ pascalize .Name }}ParamFlags(cmd *cobra.Command) error {
{{ range .Params }}
	{ 
	// {{ .GoType }}, default value is the zero value of the type.
	{{- $fullDescription := "" }}
	{{- $flagStr := .Name }}
	{{- if .Required}}
		{{- $fullDescription = printf "Required. %v" .Description}}
	{{- else}}
		{{- $fullDescription = printf "%v" .Description}}
	{{- end}}
	{{- if eq .GoType "int64" }}
		_ = cmd.PersistentFlags().Int64("{{ $flagStr }}", {{ if .HasDefault }}{{ printf "%#v" .Default }}{{else}}0{{end}}, "{{ $fullDescription }}")
	{{- else if eq .GoType "int32" }}
		_ = cmd.PersistentFlags().Int32("{{ $flagStr }}", {{ if .HasDefault }}{{ printf "%#v" .Default }}{{else}}0{{end}}, "{{ $fullDescription }}")
	{{- else if eq .GoType "string" }}
		_ = cmd.PersistentFlags().String("{{ $flagStr }}", {{ if .HasDefault }}{{ printf "%#v" .Default }}{{else}}""{{end}}, "{{ $fullDescription }}")
	{{- else if eq .GoType "float32" }}
		_ = cmd.PersistentFlags().Float32("{{ $flagStr }}", {{ if .HasDefault }}{{ printf "%#v" .Default }}{{else}}0{{end}}, "{{ $fullDescription }}")
	{{- else if eq .GoType "bool" }}
		_ = cmd.PersistentFlags().Bool("{{ $flagStr }}", {{ if .HasDefault }}{{ printf "%#v" .Default }}{{else}}false{{end}}, "{{ $fullDescription }}")
	{{- else }}
		{{- if and .IsBodyParam .Schema }}
			// struct {{.ID}}. Read the string from cmd and unmarshal
			temp := &{{.GoType}}{}
			exampleStr,err := temp.MarshalBinary()
			if err != nil {
				return err
			}
			// TODO: give better example str
			_ = cmd.PersistentFlags().String("{{ $flagStr }}", "", fmt.Sprintf("Optional json string for {{ $flagStr }} of form %v.{{ .Description }}", string(exampleStr)))
		{{- else }}
			// warning: go type {{ .GoType }} is not supported by cli. Please raise a issue
			temp := &{{.GoType}}{}
		{{- end }}

	{{- end }}

	{{/* mark required param for the flag, but not body string */}}
	{{- if and .Required (not (and .IsBodyParam .Schema))}}
		if err := cmd.MarkPersistentFlagRequired("{{ $flagStr }}"); err != nil{
			return err
		}
	{{ end }}
	{{- if and .IsBodyParam .Schema }}
		// add flags for body {{/*use go type as the flag prefix. There is no good way to determine the str case*/}}
		add{{ pascalize (dropPackage .GoType) }}Cmd("{{ camelize (dropPackage .GoType) }}", cmd)
	{{- end }}
	}
{{ end }}
	return nil
}